import java.util.*;
import java.io.*;

public class Main
{
    public static void main(String[] args)
    {
        Scanner in = new Scanner(System.in);
        char[][] board = new char[3][3];
        for(int i = 0; i < 3; i++)
            board[i] = in.nextLine().toCharArray();
        // now test board
        // how is it illegal?
        // more than one difference
        boolean fwin = win(board, 'X'),
                swin = win(board, '0');
        int c1 = count(board, 'X'), c2 = count(board, '0');
        // System.out.printf("%d\n", Math.abs(c1 - c2));
        if((fwin && swin) || Math.abs(c1 - c2) > 1 || c1 < c2)
        {
            System.out.println("illegal");
            return;
        }
        if(fwin)
        {
            if(c1 > c2) System.out.println("the first player won");
            else System.out.println("illegal"); 
            return;
        }
        if(swin) 
        {
            if(c1 == c2) System.out.println("the second player won");
            else System.out.println("illegal"); 
            return;
        }
        if(filled(board))
        {
            System.out.println("draw");
            return;
        }
        if(c1 > c2) System.out.println("second");
        else if (c1 == c2) System.out.println("first");
        else System.out.println("illegal");
    }
    
    static boolean filled(char[][] board)
    {
        return count(board, '.') == 0;
    }
    
    static boolean win(char[][] b, char t)
    {
        for(int i = 0; i < 3; i++)
        {
            if(b[i][0] == b[i][1] && b[i][1] == b[i][2] && b[i][2] == t) return true;
            if(b[0][i] == b[1][i] && b[1][i] == b[2][i] && b[2][i] == t) return true;
        }
        if(b[0][0] == b[1][1] && b[1][1] == b[2][2] && b[2][2] == t) return true;
        if(b[0][2] == b[1][1] && b[1][1] == b[2][0] && b[2][0] == t) return true;
        return false;
    }
    
    static int count(char[][] b, char t)
    {
        int re = 0;
        for(char[] bb : b) for(char ch : bb) if(ch == t) re++;
        return re;
    }
}
